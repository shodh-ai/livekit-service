# Multi-stage optimized Dockerfile for Rox Agent
# This approach separates dependency installation from application code

# Stage 1: Dependencies builder
FROM python:3.11-slim as deps-builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
COPY rox/requirements.txt rox/requirements.txt

# Install dependencies with wheel caching
RUN pip install --upgrade pip wheel setuptools
RUN pip install -r requirements.txt
RUN pip install -r rox/requirements.txt

# Stage 2: Runtime image
FROM python:3.11-slim as runtime

# Install only runtime system dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Copy installed packages from builder stage
COPY --from=deps-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=deps-builder /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /app

# Copy application code
COPY . .

# Set working directory to rox for the unified service
WORKDIR /app/rox

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app:/app/rox

# Expose port
EXPOSE 5005

# Default command runs the FastAPI server
CMD ["python", "main.py", "--server"]
